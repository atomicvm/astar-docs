"use strict";(self.webpackChunkdocs_1=self.webpackChunkdocs_1||[]).push([[2331],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return r?n.createElement(k,o(o({ref:t},s),{},{components:r})):n.createElement(k,o({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1191:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],p={sidebar_position:1},l="Precompiles",c={unversionedId:"EVM/precompiles",id:"EVM/precompiles",title:"Precompiles",description:"A precompile means a common functionality for smart contracts which has been compiled, so that Ethereum nodes can run this efficiently. From a contract's perspective, this is just a single command like an opcode.",source:"@site/docs/EVM/precompiles.md",sourceDirName:"EVM",slug:"/EVM/precompiles",permalink:"/astar-docs/docs/EVM/precompiles",editUrl:"https://github.com/AstarNetwork/astar-docs/tree/main/docs/EVM/precompiles.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"EVM",permalink:"/astar-docs/docs/EVM/"},next:{title:"Build local environment",permalink:"/astar-docs/docs/EVM/build-local-env"}},s={},m=[{value:"Ethereum Native Precompiles",id:"ethereum-native-precompiles",level:2},{value:"Astar Specific Precompiles",id:"astar-specific-precompiles",level:2},{value:"DappsStaking Precompile",id:"dappsstaking-precompile",level:3}],u={toc:m};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"precompiles"},"Precompiles"),(0,i.kt)("p",null,"A precompile means a common functionality for smart contracts which has been compiled, so that Ethereum nodes can run this efficiently. From a contract's perspective, this is just a single command like an opcode.\nThe Frontier EVM used in Astar provides several useful precompiled contracts. These contracts are implemented in our ecosystem as a native implementation. The precompiled contracts ",(0,i.kt)("inlineCode",{parentName:"p"},"0x01")," through ",(0,i.kt)("inlineCode",{parentName:"p"},"0x08")," are the same as those in Ethereum (see list below). Astar additionally implements precompiled contracts start from ",(0,i.kt)("inlineCode",{parentName:"p"},"0x5001"),", and support new Astar features."),(0,i.kt)("h2",{id:"ethereum-native-precompiles"},"Ethereum Native Precompiles"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Precompile"),(0,i.kt)("th",{parentName:"tr",align:null},"Address"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ECRecover"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000000001")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Sha256"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000000002")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Ripemd160"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000000003")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Identity"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000000004")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Modexp"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000000005")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Bn128Add"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000000006")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Bn128Mul"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000000007")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Bn128Pairing"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000000008")))),(0,i.kt)("h2",{id:"astar-specific-precompiles"},"Astar Specific Precompiles"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Precompile"),(0,i.kt)("th",{parentName:"tr",align:null},"Address"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DappsStaking"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000005001")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Sr25519"),(0,i.kt)("td",{parentName:"tr",align:null},"0x0000000000000000000000000000000000005002")))),(0,i.kt)("p",null,"The interface descriptions for these precompiles can be found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"precompiles")," folder: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AstarNetwork/astar-frame/"},"astar-frame repo"),"."),(0,i.kt)("p",null,"The Addresses can be checked in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AstarNetwork/Astar/tree/master/runtime"},"Astar repo")," for each runtime in ",(0,i.kt)("inlineCode",{parentName:"p"},"precompile.rs")," files."),(0,i.kt)("h3",{id:"dappsstaking-precompile"},"DappsStaking Precompile"),(0,i.kt)("p",null,"DappsStaking Precompile enables EVM smart contract to access ",(0,i.kt)("inlineCode",{parentName:"p"},"pallet-dapps-staking")," functionality.\nExample use of this precompile from Contract A:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'import "./DappsStaking.sol";\ncontract A {\n    DappsStaking public constant DAPPS_STAKING = DappsStaking(0x0000000000000000000000000000000000005001);\n\n    /// @notice Check current era\n    function checkCurrentEra() public view {\n        uint256 currentEra = DAPPS_STAKING.read_current_era();\n    }\n}\n')),(0,i.kt)("p",null,"Example use: check ",(0,i.kt)("inlineCode",{parentName:"p"},"current era")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"total staked amount")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"pallet-dapps-staking")," for Shiden Network. For this example we will use Remix."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Copy ",(0,i.kt)("inlineCode",{parentName:"p"},"DappsStaking.sol")," from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AstarNetwork/astar-frame/"},"astar-frame repo")," and create new contract in Remix:\n",(0,i.kt)("img",{parentName:"p",src:"https://i.imgur.com/mr0TcLq.png",alt:null}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Compile the dAppStaking contract:\n",(0,i.kt)("img",{parentName:"p",src:"https://i.imgur.com/6Wgg9rf.jpg",alt:null}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The precompile does not need to be deployed since it is already on the network, but you need to tell Remix where to find it.\nAfter you connect your EVM wallet to Shiden Network (same applies for Astar Network and for Shibuya Testnet) follow these steps:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"1. Go to Deploy tab\n2. Use injected Web3 environment. It should point to Shiden Mainnet with `ChainId 336`\n3. Make sure you have the selected dAppStaking contract\n4. Provide the address of the precompiled contract `0x0000000000000000000000000000000000005001`\n5. The dAppStaking contract will appear under Deployed contracts\n")))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://i.imgur.com/6RnQlkb.jpg",alt:null})),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Interact with the contract.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"1. Check the current era \n2. Use the current era as input to check total staked amount on the network\n")),(0,i.kt)("img",{parentName:"li",src:"https://user-images.githubusercontent.com/34627453/159696985-19f67e95-807e-4c20-b74c-c9f4944ada32.jpg",alt:"precompile-interact"}))))}d.isMDXComponent=!0}}]);